package application;
	
import java.net.ServerSocket;
import java.util.*;
import java.util.concurrent.ExecutorService;

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;


public class Main extends Application {
	public static ExecutorService threadPool; //여러 클라이언트가 접속했을때 스레드들을 효과적으로 관리할 수 있도록함
	             // -> 여러개의 스레드를 효율적으로 관리하기 위해 사용하는 라이브러리 (스레드풀을 사용하면 스레드 개수에 제한을 두어 갑자기 많아지는 클라이언트로 인한 서버 성능 저하를 막을 수 있음)
	public static Vector<Client> clients = new Vector<Client>(); //클라이언트 관리를 위한 벡터

	ServerSocket serverSocket;
	
	//서버를 구동시켜서 클라이언트의 연결을 기다리는 메소드
	public void startSertver(String IP, int port) {
		
	}
	
	//서벙의 작동을 중지시키는 메소드
	public void stopServer() {
		
	}
	
	//UI를 생성하고 실질적으로 프로그램을 동작시키는 메소드
	@Override
	public void start(Stage primaryStage) {
		
	}
	
	//프로그램의 진입점
	public static void main(String[] args) {
		launch(args);
	}
}
