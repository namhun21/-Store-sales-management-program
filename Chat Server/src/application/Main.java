package application;
	
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.stage.Stage;
import javafx.scene.control.Button;
import javafx.scene.Scene;
import javafx.scene.control.TextArea;
import javafx.scene.layout.BorderPane;
import javafx.scene.text.Font;


public class Main extends Application {
	public static ExecutorService threadPool; //여러 클라이언트가 접속했을때 스레드들을 효과적으로 관리할 수 있도록함
	             // -> 여러개의 스레드를 효율적으로 관리하기 위해 사용하는 라이브러리 (스레드풀을 사용하면 스레드 개수에 제한을 두어 갑자기 많아지는 클라이언트로 인한 서버 성능 저하를 막을 수 있음)
	public static Vector<Client> clients = new Vector<Client>(); //클라이언트 관리를 위한 벡터

	ServerSocket serverSocket;
	
	//서버를 구동시켜서 클라이언트의 연결을 기다리는 메소드
	public void startServer(String IP, int port) {
		try {
			serverSocket = new ServerSocket(); //소켓 객체 활성화
			serverSocket.bind(new InetSocketAddress(IP,port)); //서버 역할을 하는 컴퓨터가 자신의  ip주소, port번호로 특정 클라이언트의 접속을 기다리도록함
		}
		catch(Exception e) {
			e.printStackTrace();
			if(!serverSocket.isClosed()) {
				stopServer();
			}
			return;
		}
		//클라이언트가 접속할 때까지 계속 기다리는 스레드
		Runnable thread = new Runnable() {

			@Override
			public void run() {
				while(true) {
					try {
						Socket socket = serverSocket.accept();//클라이언트 기다리다가 접속하면
						clients.add(new Client(socket)); //해당소켓으로 클라이언트를 초기화 후 클라이언트 배열에 저장
						System.out.println("[클라이언트 접속]" 
						+ socket.getRemoteSocketAddress() +": "
						+ Thread.currentThread().getName());
					}
					catch(Exception e) {
						if(!serverSocket.isClosed()) {
							stopServer();
						}
						break;
					}
					
				}
			}
			
		};
		threadPool = Executors.newCachedThreadPool(); //threadpool 초기화
		threadPool.submit(thread);
	}
	
	//서벙의 작동을 중지시키는 메소드
	public void stopServer() {
		try {
			//현재 작동중인 모든 소켓 닫기
			Iterator<Client> iterator = clients.iterator();
			while(iterator.hasNext()) {
				Client client = iterator.next();
				client.socket.close();
				iterator.remove();
			}
			//서버소켓 닫기
			if(serverSocket !=null && !serverSocket.isClosed()) {
				serverSocket.close();
			}
			
			//threadpool 종료
			if(threadPool != null && !threadPool.isShutdown()) {
				threadPool.shutdown();
			}
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	//UI를 생성하고 실질적으로 프로그램을 동작시키는 메소드
	@Override
	public void start(Stage primaryStage) {
		BorderPane root = new BorderPane(); //다른 요소들을 담을수 있는
		root.setPadding(new Insets(5));
		
		TextArea textArea = new TextArea();
		textArea.setEditable(false); // 수정불가
		textArea.setFont(new Font("나눔고딕",15));
		root.setCenter(textArea);
		
		Button toggleButton = new Button("시작하기"); //스위치 같은 기능
		toggleButton.setMaxWidth(Double.MAX_VALUE);
		BorderPane.setMargin(toggleButton, new Insets(1,0,0,0));
		root.setBottom(toggleButton);
		
		String IP = "127.0.0.1"; // local
		int port = 9876;
		
		toggleButton.setOnAction(event->{
			if(toggleButton.getText().equals("시작하기")) {
				startServer(IP,port); //버튼을 눌렀을 때 바로 textArea에 정보를 쓰도록 하면 안된다
				Platform.runLater(()-> {
					String message = String.format("[서버시작]\n", IP,port);
					textArea.appendText(message);
					toggleButton.setText("종료하기");
				});
			}else {
				stopServer();
				Platform.runLater(()-> {
					String message = String.format("[서버종료]\n", IP,port);
					textArea.appendText(message);
					toggleButton.setText("시작하기");
				});
			}
		});
		
		Scene scene = new Scene(root, 400,400);//크기 조정
		primaryStage.setTitle("[ 채팅 서버 ]");
		primaryStage.setOnCloseRequest(event-> stopServer());
		primaryStage.setScene(scene);
		primaryStage.show();
	}
	
	//프로그램의 진입점
	public static void main(String[] args) {
		launch(args);
	}
}
